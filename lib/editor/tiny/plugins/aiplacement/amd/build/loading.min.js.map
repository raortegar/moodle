{"version":3,"file":"loading.min.js","sources":["../src/loading.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI loading screen handling.\n *\n * @module      tiny_aiplacement/loading\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as coreStr from 'core/str';\n\n/**\n * Display a series of messages one by one with a specified delay between each message.\n * Returns a promise that resolves when the final message is displayed.\n *\n * @param {HTMLElement} element The element to display the messages in.\n * @param {number} delay The delay between each message in milliseconds.\n * @returns {Promise<function(): void>} A function to stop the message cycling.\n */\nexport async function loadingMessages(element, delay = 6000) {\n    let stop = false;\n\n    /**\n     * Stop the message cycling.\n     */\n    function stopMessages() {\n        stop = true;\n    }\n\n    // Retrieve the messages using the async/await pattern.\n    const messages = await coreStr.get_strings([\n        {\n            key: 'loading_processing',\n            component: 'tiny_aiplacement',\n        },\n        {\n            key: 'loading_generating',\n            component: 'tiny_aiplacement',\n        },\n        {\n            key: 'loading_applying',\n            component: 'tiny_aiplacement',\n        },\n        {\n            key: 'loading_almostdone',\n            component: 'tiny_aiplacement',\n        }\n    ]);\n\n    // eslint-disable-next-line no-async-promise-executor\n    return new Promise(async(resolve) => {\n        for (let i = 0; i < messages.length; i++) {\n            if (stop) {\n                break;\n            }\n\n            element.textContent = messages[i];\n            await new Promise((r) => setTimeout(r, delay));\n        }\n\n        resolve(stopMessages);\n    });\n}\n"],"names":["element","delay","stop","stopMessages","messages","coreStr","get_strings","key","component","Promise","async","i","length","textContent","r","setTimeout","resolve"],"mappings":";;;;;;;;eAiCsCA,aAASC,6DAAQ,IAC/CC,MAAO,WAKFC,eACLD,MAAO,QAILE,eAAiBC,QAAQC,YAAY,CACvC,CACIC,IAAK,qBACLC,UAAW,oBAEf,CACID,IAAK,qBACLC,UAAW,oBAEf,CACID,IAAK,mBACLC,UAAW,oBAEf,CACID,IAAK,qBACLC,UAAW,6BAKZ,IAAIC,SAAQC,MAAAA,cACV,IAAIC,EAAI,EAAGA,EAAIP,SAASQ,SACrBV,KAD6BS,IAKjCX,QAAQa,YAAcT,SAASO,SACzB,IAAIF,SAASK,GAAMC,WAAWD,EAAGb,SAG3Ce,QAAQb"}