{"version":3,"file":"generatebase.min.js","sources":["../src/generatebase.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI base generate class.\n *\n * @module      tiny_aiplacement/generatebase\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {loadingMessages} from 'tiny_aiplacement/loading';\nimport {getString} from 'core/str';\nimport Templates from 'core/templates';\nimport {\n    getContextId,\n    getUserId\n} from 'tiny_aiplacement/options';\nimport {getPolicyStatus, setPolicyStatus} from 'core/ai/policy';\n\nexport default class GenerateBase {\n\n    modalObject;\n\n    /**\n     * Class constructor.\n     *\n     * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n     */\n    constructor(editor) {\n        this.editor = editor;\n        this.userid = getUserId(editor);\n        this.contextid = getContextId(editor);\n        this.responseObj = null;\n    }\n\n    /**\n     * Display the modal when the AI button is clicked.\n     *\n     */\n    displayContentModal = async() => {\n        const templateContext = this.getTemplateContext();\n        this.modalObject = await this.setupModal();\n        await this.modalObject.show(); // Will briefly show the modal with the loading spinner, while the content is being fetched.\n\n        // Check if we need to display and handle the AI acceptance policy.\n        const checkPolicy = await getPolicyStatus(this.userid, this.contextid);\n        if (!checkPolicy.status) {\n            await this.setupPolicyModal(templateContext);\n        } else {\n            await this.setupContentModal(templateContext);\n        }\n    };\n\n    /**\n     * Add event listeners for the text modal.\n     *\n     * @returns {void}\n     */\n    addContentEventListeners = async() => {\n        const modalRoot = await this.modalObject.getRoot();\n        const root = modalRoot[0];\n\n        root.addEventListener('click', (e) => {\n            this.handleContentModalClick(e, root);\n        });\n\n        this.setupPromptArea(root);\n        this.hideLoadingSpinner(root);\n    };\n\n    /**\n     * Set up the policy modal with loading spinner and policy content.\n     *\n     * @param {object} templateContext The template context.\n     * @returns {Promise<void>} A promise that resolves when the modal is set up.\n     */\n    setupPolicyModal = async(templateContext) => {\n        const loadingContext = {...templateContext, ishidden: true};\n        const [loadingBody, policyBody, policyFooter] = await Promise.all([\n            Templates.render('tiny_aiplacement/loading', loadingContext),\n            Templates.render('tiny_aiplacement/modalbodypolicy', templateContext),\n            Templates.render('tiny_aiplacement/modalfooterpolicy', templateContext)\n        ]);\n\n        this.modalObject.setBody(loadingBody + policyBody);\n        this.modalObject.setFooter(policyFooter);\n        this.modalObject.setTitle(getString('aiusagepolicy', 'core_ai'));\n        this.addPolicyEventListeners();\n    };\n\n    /**\n     * Hide the loading spinner.\n     *\n     * @param {Object} root The root element of the modal.\n     */\n    hideLoadingSpinner = (root) => {\n        const loadingSpinnerDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_spinner`);\n        loadingSpinnerDiv.classList.add('hidden');\n        loadingSpinnerDiv.classList.remove('tiny-aiplacement-loading-spinner-container');\n    };\n\n    /**\n     * Add event listeners for the policy modal.\n     *\n     * @returns {void}\n     */\n    addPolicyEventListeners = async() => {\n        const modalRoot = await this.modalObject.getRoot();\n        const root = modalRoot[0];\n\n        root.addEventListener('click', (e) => {\n            this.handlePolicyModalClick(e);\n        });\n    };\n\n\n    /**\n     * Handle click events within the policy modal.\n     *\n     * @param {Event} e - The click event object.\n     */\n    handlePolicyModalClick = (e) => {\n        const actions = {\n            accept: () => this.handlePolicyAccept(e.target),\n            cancel: () => this.modalObject.destroy()\n        };\n\n        const actionKey = Object.keys(actions).find(key => e.target.closest(`[data-action=\"${key}\"]`));\n        if (actionKey) {\n            e.preventDefault();\n            actions[actionKey]();\n        }\n    };\n\n    /**\n     * Handle the policy accept action.\n     *\n     * @param {Object} acceptBtn The submit button element.\n     * @returns {void}\n     */\n    handlePolicyAccept = async(acceptBtn) => {\n        await setPolicyStatus(this.userid, this.contextid);\n\n        const modalRoot = await this.modalObject.getRoot();\n        const root = modalRoot[0];\n\n        await this.displayLoading(root, acceptBtn, 'tiny-aiplacement-loading-spinner-container');\n\n        const templateContext = this.getTemplateContext();\n        await this.setupContentModal(templateContext);\n        await this.hideLoading(root, acceptBtn);\n    };\n\n    /**\n     * Get the context to use in the modal template.\n     *\n     * @returns {Object}\n     */\n    getTemplateContext = () => {\n        return {elementid: this.editor.id};\n    };\n\n    /**\n     * Display the loading state in the modal.\n     *\n     * @param {HTMLElement} root - The root element of the modal.\n     * @param {HTMLElement} submitBtn - The submit button element.\n     * @param {String|null} removeClass - The class to be removed from the loading spinner div, if any.\n     */\n    displayLoading = async(root, submitBtn, removeClass = null) => {\n        const loadingSpinnerDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_spinner`);\n        const overlayDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_overlay`);\n        const blurDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_blur`);\n        const loadingTextDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_loading_text`);\n        const actionButtons = root.querySelectorAll('.tiny-aiplacement-generate-footer button');\n\n        loadingMessages(loadingTextDiv);\n\n        if (removeClass) {\n            loadingSpinnerDiv.classList.remove(removeClass);\n        }\n\n        loadingSpinnerDiv.classList.remove('hidden');\n        overlayDiv.classList.remove('hidden');\n        blurDiv.classList.add('tiny-aiplacement-blur');\n        submitBtn.innerHTML = await getString('generating', 'tiny_aiplacement');\n\n        if (actionButtons) {\n            actionButtons.forEach((button) => {\n                button.disabled = true;\n            });\n        }\n    };\n\n    /**\n     * Hide the loading action in the modal.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {Object} submitBtn The submit button element.\n     */\n    hideLoading = async(root, submitBtn) => {\n        const loadingSpinnerDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_spinner`);\n        const overlayDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_overlay`);\n        const blurDiv = root.querySelector(`#${this.editor.id}_tiny_aiplacement_blur`);\n        const actionButtons = root.querySelectorAll('.tiny-aiplacement-generate-footer button');\n        if (loadingSpinnerDiv) {\n            loadingSpinnerDiv.classList.add('hidden');\n        }\n        if (overlayDiv) {\n            overlayDiv.classList.add('hidden');\n        }\n        if (blurDiv) {\n            blurDiv.classList.remove('tiny-aiplacement-blur');\n        }\n        submitBtn.innerHTML = await getString('regenerate', 'tiny_aiplacement');\n\n        if (actionButtons) {\n            actionButtons.forEach((button) => {\n                button.disabled = false;\n            });\n        }\n    };\n\n}\n"],"names":["constructor","editor","async","templateContext","this","getTemplateContext","modalObject","setupModal","show","userid","contextid","status","setupContentModal","setupPolicyModal","root","getRoot","addEventListener","e","handleContentModalClick","setupPromptArea","hideLoadingSpinner","loadingContext","ishidden","loadingBody","policyBody","policyFooter","Promise","all","Templates","render","setBody","setFooter","setTitle","addPolicyEventListeners","loadingSpinnerDiv","querySelector","id","classList","add","remove","handlePolicyModalClick","actions","accept","handlePolicyAccept","target","cancel","destroy","actionKey","Object","keys","find","key","closest","preventDefault","displayLoading","acceptBtn","hideLoading","elementid","submitBtn","removeClass","_this","overlayDiv","blurDiv","loadingTextDiv","actionButtons","querySelectorAll","innerHTML","forEach","button","disabled","responseObj"],"mappings":"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"}