{"version":3,"file":"generateimage.min.js","sources":["../src/generateimage.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI generate images.\n *\n * @module      tiny_aiplacement/generateimage\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalEvents from 'core/modal_events';\nimport ImageModal from 'tiny_aiplacement/imagemodal';\nimport Ajax from 'core/ajax';\nimport {getString} from 'core/str';\nimport Templates from 'core/templates';\nimport AiMediaImage from './mediaimage';\nimport {getContextId} from 'tiny_aiplacement/options';\nimport GenerateBase from 'tiny_aiplacement/generatebase';\n\nexport default class GenerateImage extends GenerateBase {\n\n    SELECTORS = {};\n\n    /**\n     * The modal configuration object.\n     * @type {{xlarge: boolean, type: *}}\n     */\n    static modalConfig = {\n        type: ImageModal.TYPE,\n        xlarge: true,\n    };\n\n    /**\n     * Class constructor.\n     *\n     * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n     */\n    constructor(editor) {\n        super(editor);\n        this.imageURL = null;\n        this.SELECTORS = {\n            GENERATEBUTTON: `#${this.editor.id}_tiny_aiplacement_generatebutton`,\n            PROMPTAREA: `#${this.editor.id}_tiny_aiplacement_imageprompt`,\n            IMAGECONTAINER: `#${this.editor.id}_tiny_aiplacement_generate_image`,\n            FAIMAGE: `#${this.editor.id}_tiny_aiplacement_fa_image`,\n            FAIMAGE_TEXT: `#${this.editor.id}_tiny_aiplacement_fa_image_text`,\n            GENERATEBTN: '[data-action=\"generate\"]',\n            INSERTBTN: '[data-action=\"inserter\"]',\n            BACKTBTN: '[data-action=\"back\"]',\n            GENERATEDIMAGE: `#${this.editor.id}_tiny_generated_image`,\n        };\n    }\n\n    /**\n     * Set up the base image generation modal with default body content.\n     *\n     * @returns {ImageModal} The image modal object.\n     */\n    setupModal = async() => {\n        const modalObject = await ImageModal.create(GenerateImage.modalConfig);\n        const modalRoot = await modalObject.getRoot();\n\n        modalRoot.on(ModalEvents.hidden, () => {\n            modalObject.destroy();\n        });\n\n        return modalObject;\n    };\n\n    /**\n     * Set up the image modal.\n     *\n     * @param {object} templateContext The template context.\n     * @returns {Promise<void>} A promise that resolves when the modal is set up.\n     */\n    setupContentModal = async(templateContext) => {\n        const [loadingBody, imageBody, imageFooter] = await Promise.all([\n            Templates.render('tiny_aiplacement/loading', templateContext),\n            Templates.render('tiny_aiplacement/modalbodyimage', templateContext),\n            Templates.render('tiny_aiplacement/modalfooterimage', templateContext)\n        ]);\n\n        this.modalObject.setBody(loadingBody + imageBody);\n        this.modalObject.setFooter(imageFooter);\n        this.addContentEventListeners();\n    };\n\n    /**\n     * Handle click events within the image modal.\n     *\n     * @param {Event} e - The click event object.\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    handleContentModalClick = (e, root) => {\n        const actions = {\n            generate: () => this.handleSubmit(root, e.target),\n            inserter: () => this.handleInsert(),\n            cancel: () => this.modalObject.destroy(),\n            back: () => {\n                this.modalObject.destroy();\n                this.displayContentModal();\n            },\n        };\n\n        const actionKey = Object.keys(actions).find(key => e.target.closest(`[data-action=\"${key}\"]`));\n        if (actionKey) {\n            e.preventDefault();\n            actions[actionKey]();\n        }\n    };\n\n    /**\n     * Set up the prompt area in the modal, adding necessary event listeners.\n     *\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    setupPromptArea = (root) => {\n        const generateBtn = root.querySelector(this.SELECTORS.GENERATEBUTTON);\n        const promptArea = root.querySelector(this.SELECTORS.PROMPTAREA);\n\n        promptArea.addEventListener('input', () => {\n            generateBtn.disabled = promptArea.value.trim() === '';\n        });\n    };\n\n    /**\n     * Handle the submit action.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {Object} submitBtn The submit button element.\n     */\n    handleSubmit = async(root, submitBtn) => {\n        await this.displayLoading(root, submitBtn);\n\n        const displayArgs = this.getDisplayArgs(root);\n        const request = {\n            methodname: 'aiplacement_tinymce_generate_image',\n            args: displayArgs\n        };\n\n        try {\n            this.responseObj = await Ajax.call([request])[0];\n            if (this.responseObj.error) {\n                this.handleGenerationError(root, submitBtn, '');\n            } else {\n                await this.displayGeneratedImage(root);\n                this.hideLoading(root, submitBtn);\n                window.console.log(this.responseObj);\n            }\n        } catch (error) {\n            this.handleGenerationError(root, submitBtn, '');\n        }\n    };\n\n    /**\n     * Handle the insert action.\n     *\n     */\n    handleInsert = async() => {\n        const mediaImage = new AiMediaImage(this.editor, this.imageURL, this.promptText);\n        await mediaImage.displayDialogue();\n        this.modalObject.destroy();\n    };\n\n    /**\n     * Handle a generation error.\n     *\n     * @param {Object} root The root element of the modal.\n     * @param {Object} submitBtn The submit button element.\n     * @param {String} errorMessage The error message to display.\n     */\n    handleGenerationError = async(root, submitBtn, errorMessage = '') => {\n        if (!errorMessage) {\n            // Get the default error message.\n            errorMessage = await getString('errorgeneral', 'tiny_aiplacement');\n        }\n        this.hideLoading(root, submitBtn);\n        this.modalObject.setBody(Templates.render('tiny_aiplacement/modalbodyerror', {'errorMessage': errorMessage}));\n        const backBtn = root.querySelector(this.SELECTORS.BACKTBTN);\n        const generateBtn = root.querySelector(this.SELECTORS.GENERATEBUTTON);\n        backBtn.classList.remove('hidden');\n        generateBtn.classList.add('hidden');\n    };\n\n    /**\n     * Display the generated image in the modal.\n     *\n     * @param {HTMLElement} root - The root element of the modal.\n     */\n    displayGeneratedImage = async(root) => {\n        const imageDisplayContainer = root.querySelector(this.SELECTORS.IMAGECONTAINER);\n        const insertBtn = root.querySelector(this.SELECTORS.INSERTBTN);\n        // Set the draft URL as it's used elsewhere.\n        this.imageURL = this.responseObj.drafturl;\n\n        // Render the image template and insert it into the modal.\n        imageDisplayContainer.innerHTML = await Templates.render('tiny_aiplacement/image',\n            {url: this.responseObj.drafturl, elementid: this.editor.id});\n        const imagElement = root.querySelector(this.SELECTORS.GENERATEDIMAGE);\n\n        return new Promise((resolve, reject) => {\n            imagElement.onload = () => {\n                insertBtn.classList.remove('hidden');\n                resolve(); // Resolve the promise when the image is loaded.\n            };\n            imagElement.onerror = (error) => {\n                reject(error); // Reject the promise if there is an error loading the image.\n            };\n        });\n    };\n\n    /**\n     * Get the display args for the image.\n     *\n     * @param {Object} root The root element of the modal.\n     */\n    getDisplayArgs = (root) => {\n        const contextId = getContextId(this.editor);\n        const promptText = root.querySelector(this.SELECTORS.PROMPTAREA).value;\n        this.promptText = promptText;\n\n        const aspectRatio = this.getSelectedRadioValue('aspect-ratio', 'square');\n        const imageQuality = this.getSelectedRadioValue('quality', 'standard');\n\n        return {\n            contextid: contextId,\n            prompttext: promptText,\n            aspectratio: aspectRatio,\n            quality: imageQuality ? 'hd' : 'standard',\n            numimages: 1\n        };\n    };\n\n    /**\n     * Get the value of the selected radio button.\n     *\n     * @param {String} radioName The name of the radio button group.\n     * @param {String} defaultValue The default value of the radio button.\n     */\n    getSelectedRadioValue = (radioName, defaultValue = null) => {\n        const radios = document.getElementsByName(radioName);\n        for (const radio of radios) {\n            if (radio.checked) {\n                return radio.value;\n            }\n        }\n        return defaultValue;\n    };\n}\n"],"names":["GenerateImage","GenerateBase","constructor","editor","async","modalObject","ImageModal","create","modalConfig","getRoot","on","ModalEvents","hidden","destroy","loadingBody","imageBody","imageFooter","Promise","all","Templates","render","templateContext","setBody","setFooter","addContentEventListeners","e","root","actions","generate","this","handleSubmit","target","inserter","handleInsert","cancel","back","displayContentModal","actionKey","Object","keys","find","key","closest","preventDefault","generateBtn","querySelector","SELECTORS","GENERATEBUTTON","promptArea","PROMPTAREA","addEventListener","disabled","value","trim","submitBtn","displayLoading","request","methodname","args","getDisplayArgs","responseObj","Ajax","call","error","handleGenerationError","displayGeneratedImage","hideLoading","window","console","log","mediaImage","AiMediaImage","imageURL","promptText","displayDialogue","errorMessage","_this","backBtn","BACKTBTN","classList","remove","add","imageDisplayContainer","IMAGECONTAINER","insertBtn","INSERTBTN","drafturl","innerHTML","url","elementid","id","imagElement","GENERATEDIMAGE","resolve","reject","onload","onerror","contextId","contextid","prompttext","aspectratio","getSelectedRadioValue","quality","numimages","radioName","defaultValue","radios","document","getElementsByName","radio","checked","FAIMAGE","FAIMAGE_TEXT","GENERATEBTN","type","TYPE","xlarge"],"mappings":"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"}