{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_aiplacement plugin.\n *\n * @module      tiny_aiplacement/commands\n * @copyright   2024 Matt Porritt <matt.porritt@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage, addDynamicToolbarMenu} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    placement,\n    contextMenuName,\n    generateImageName,\n    generateTextName,\n    contextMenuIcon,\n    generateImageIcon,\n    generateTextIcon\n} from './common';\nimport GenerateImage from './generateimage';\nimport GenerateText from './generatetext';\nimport {isTextAllowed, isImageAllowed} from './options';\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        contextMenuIconText,\n        generateImageIconText,\n        generateTextIconText,\n        contextMenuIconImage,\n        generateImageIconImage,\n        generateTextIconImage,\n    ] = await Promise.all([\n        getString('generatecontent', placement),\n        getString('generateimage', placement),\n        getString('generatetext', placement),\n        getButtonImage(contextMenuIcon, component),\n        getButtonImage(generateImageIcon, component),\n        getButtonImage(generateTextIcon, component),\n    ]);\n\n    return (editor) => {\n        if (!isTextAllowed(editor) && !isImageAllowed(editor)) {\n            return;\n        }\n\n        // Register the icon SVG files as an icon suitable for use in TinyMCE toolbars and buttons.\n        editor.ui.registry.addIcon(contextMenuIcon, contextMenuIconImage.html);\n        editor.ui.registry.addIcon(generateImageIcon, generateImageIconImage.html);\n        editor.ui.registry.addIcon(generateTextIcon, generateTextIconImage.html);\n\n        // Generators.\n        const textGenerator = new GenerateText(editor);\n        const imageGenerator = new GenerateImage(editor);\n\n        // Add the menu items.\n        if (isTextAllowed(editor)) {\n            editor.ui.registry.addMenuItem(generateTextName, {\n                icon: generateTextIcon,\n                text: generateTextIconText,\n                onAction: () => {\n                    textGenerator.displayContentModal(editor);\n                },\n            });\n        }\n        if (isImageAllowed(editor)) {\n            editor.ui.registry.addMenuItem(generateImageName, {\n                icon: generateImageIcon,\n                text: generateImageIconText,\n                onAction: () => {\n                    imageGenerator.displayContentModal(editor);\n                },\n            });\n        }\n\n        // Add the context menu button.\n        let menuItems = [];\n        let singleButton;\n        let singleButtonTitle;\n        let generator;\n        if (isTextAllowed(editor)) {\n            menuItems.push(generateTextName);\n        }\n        if (isImageAllowed(editor)) {\n            menuItems.push(generateImageName);\n        }\n        if (isTextAllowed(editor) && !isImageAllowed(editor)) {\n            // Only text generation is allowed.\n            singleButton = generateTextIcon;\n            singleButtonTitle = generateTextIconText;\n            generator = textGenerator;\n        } else if (isImageAllowed(editor) && !isTextAllowed(editor)) {\n            // Only image generation is allowed.\n            singleButton = generateImageIcon;\n            singleButtonTitle = generateImageIconText;\n            generator = imageGenerator;\n        }\n        const singleAction = () => {\n            generator.displayContentModal(editor);\n        };\n\n        addDynamicToolbarMenu(editor, menuItems, contextMenuName, contextMenuIcon,\n            contextMenuIconText, singleButton, singleButtonTitle, singleAction\n        );\n    };\n};\n"],"names":["async","contextMenuIconText","generateImageIconText","generateTextIconText","contextMenuIconImage","generateImageIconImage","generateTextIconImage","Promise","all","placement","contextMenuIcon","component","generateImageIcon","generateTextIcon","editor","ui","registry","addIcon","html","textGenerator","GenerateText","imageGenerator","GenerateImage","addMenuItem","generateTextName","icon","text","onAction","displayContentModal","generateImageName","singleButton","singleButtonTitle","generator","menuItems","push","contextMenuName"],"mappings":";;;;;;;kNA+CwBA,gBAEhBC,oBACAC,sBACAC,qBACAC,qBACAC,uBACAC,6BACMC,QAAQC,IAAI,EAClB,mBAAU,kBAAmBC,oBAC7B,mBAAU,gBAAiBA,oBAC3B,mBAAU,eAAgBA,oBAC1B,yBAAeC,wBAAiBC,oBAChC,yBAAeC,0BAAmBD,oBAClC,yBAAeE,yBAAkBF,4BAG7BG,cACC,0BAAcA,WAAY,2BAAeA,eAK9CA,OAAOC,GAAGC,SAASC,QAAQP,wBAAiBN,qBAAqBc,MACjEJ,OAAOC,GAAGC,SAASC,QAAQL,0BAAmBP,uBAAuBa,MACrEJ,OAAOC,GAAGC,SAASC,QAAQJ,yBAAkBP,sBAAsBY,YAG7DC,cAAgB,IAAIC,sBAAaN,QACjCO,eAAiB,IAAIC,uBAAcR,SAGrC,0BAAcA,SACdA,OAAOC,GAAGC,SAASO,YAAYC,yBAAkB,CAC7CC,KAAMZ,yBACNa,KAAMvB,qBACNwB,SAAU,KACNR,cAAcS,oBAAoBd,YAI1C,2BAAeA,SACfA,OAAOC,GAAGC,SAASO,YAAYM,0BAAmB,CAC9CJ,KAAMb,0BACNc,KAAMxB,sBACNyB,SAAU,KACNN,eAAeO,oBAAoBd,eAO3CgB,aACAC,kBACAC,UAHAC,UAAY,IAIZ,0BAAcnB,SACdmB,UAAUC,KAAKV,2BAEf,2BAAeV,SACfmB,UAAUC,KAAKL,4BAEf,0BAAcf,WAAY,2BAAeA,SAEzCgB,aAAejB,yBACfkB,kBAAoB5B,qBACpB6B,UAAYb,gBACL,2BAAeL,WAAY,0BAAcA,UAEhDgB,aAAelB,0BACfmB,kBAAoB7B,sBACpB8B,UAAYX,iDAMMP,OAAQmB,UAAWE,wBAAiBzB,wBACtDT,oBAAqB6B,aAAcC,mBALlB,KACjBC,UAAUJ,oBAAoBd"}